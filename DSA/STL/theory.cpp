#include<bits/stdc++.h>
using namespace std; 

int main(){

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //-----------------------PAIRS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // pair<int,char>p1={1,'A'};
    // cout<<p1.first<<" "<<p1.second<<endl;
    //
    //
    // pair<pair<int,int>,pair<int,int>>p2={{1,2},{3,4}};
    // cout<<p2.first.first<<" "<<p2.first.second<<"||||"<<p2.second.first<<" "<<p2.second.second<<endl;
    //
    //
    // pair<int,int> arr[]={{1,2},{2,5},{5,1}};
    // cout<<arr[0].first<<" "<<arr[0].second<<endl;
    // cout<<arr[1].first<<" "<<arr[1].second<<endl;
    // cout<<arr[2].first<<" "<<arr[2].second<<endl;



//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    



//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //-------------------------VECTORS----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // vector<int>v;
    // v.push_back(1);
    // v.emplace_back(2);// emplace back does the same thing as push back but it is faster than push back
    // //
    // //
    // vector<pair<int,int>>v2;
    // v2.push_back({1,2});
    // v2.emplace_back(3,4);
    // //
    // //
    // vector<int>v3(5,100);
    // vector<int>v4(v3);
    // //
    // //
    // vector<int>::iterator it=v3.begin();//this is how you initialize an iterator
    // one way to print the vector
    // for(vector<int>::iterator x=v4.begin();x!=v4.end();x++){
    //     cout<<*(x)<<" ";
    // }
    // //another way to print the vector
    // for(auto x=v3.begin();x!=v3.end();++x){
    //     cout<<*(x)<<endl;
    // }
    // //another way to print the vector
    // for(auto it:v){
    //     cout<<it<<" ";
    // }
    // //
    // //
    // vector<int>v5={1,2,3,4,5,6,7,8,9,10};
    // v5.erase(v5.begin()+1,v5.begin()+7);// {1,8,9,10}// it erases from index 1 to 6 it erase (-1) from the end
    // for(auto it:v5){
    //     cout<<it<<" ";
    // }
    // //
    // //
    // vector<int>v6(2,100); //{100,100}
    // v6.insert(v6.begin(),300);//{300,100,100}
    // v6.insert(v6.begin()+1,5,10);//{300,10,10,10,10,10,100,200}
    // for(auto x:v6){
    //     cout<<x<<" ";
    // }



//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //----------------------------LISTS-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // list<int>ls;
    // ls.push_back(2);
    // ls.emplace_back(4);
    // ls.push_front(5);
    // ls.emplace_front(7);
    // for(auto x:ls){
    //     cout<<x<<" ";
    // }
    // rest same as vector



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //---------------------------DEQUE----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // deque<int>dq;
    // dq.push_back(2);
    // dq.emplace_back(4);
    // dq.push_front(5);
    // dq.emplace_front(7);
    // for(auto x:dq){
    //     cout<<x<<" ";
    // }
    // dq.pop_back();
    // dq.pop_front();
    // for(auto x:dq){
    //     cout<<x<<" ";
    // }
    // rest same as vector



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   



//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //------------------------------STACK--------------------------------------------------------------------------------------------------------------------------------------------------------
    // stack<int>st;
    // st.push(1);
    // st.push(2);
    // st.push(3);
    // st.push(4);
    // st.emplace(5);
    // cout<<st.top();
    // st.pop();
    // cout<<st.top();
    // cout<<st.size();



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //---------------------------------QUEUE-------------------------------------------------------------------------------------------------------------------------------------
    // FIFO(first in first out)
    //  queue<int>q;
    // q.push(1);
    // q.push(2);
    // q.emplace(4);
    // cout<<q.front();
    // cout<<q.back();
    // q.pop();
    // cout<<q.front();
    //else same as stack



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //----------------------------PRIORITY QUEUE-------------------------------------------------------------------------------------------------------------------------------
    //-----[MAX HEAP]-----------------------------------------------
    //     STORS GREATEST INTEGER ON TOP
    // priority_queue<int>pq;
    // pq.push(1);
    // pq.push(2);
    // pq.emplace(4);
    // pq.emplace(3);
    // pq.emplace(7);
    // pq.emplace(5);
    // cout<<pq.top();
    // pq.pop();
    // cout<<pq.top();
    //
    //
    //-----[MIN HEAP]-----------------------------------------------
    //      STORES SMALLEST INTEGER ON TOP
    // priority_queue<int,vector<int>,greater<int>>pq;
    // pq.push(1);
    // pq.push(2);            TIME COMPLEXITY Log(n)
    // pq.emplace(4);
    // pq.emplace(3);
    // pq.emplace(7);
    // pq.emplace(5);
    // cout<<pq.top();
    // pq.pop();            TIME COMPLEXITY Log(n)
    // cout<<pq.top();        TIME COMPLEXITY O(1)



//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



    //----------------------------SET----------------------------------------------------------------------------------------------------------------------------------------
    // set<int>st;
    // st.insert(2);
    // st.emplace(2);
    // st.emplace(9);
    // st.emplace(10);
    // st.emplace(5);
    // st.emplace(220);
    //
    // auto it =st.find(9);
    // cout<<*(it);
    // st.erase(it);
    //
    // int cnt=st.count(5);



//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    



//---------------------------------------------------------------------------------------------------------------------------------------------------------



    //-------------------------MULTISET---------------------------------------------------------------------------------------------------------------
    // multiset<int>ms;
    // ms.emplace(1);
    // ms.emplace(1);
    // ms.emplace(1);
    // ms.emplace(1);
    // ms.emplace(2);
    // ms.emplace(2);
    // ms.emplace(2);
    // ms.erase (1);// erases all 1;
    // ms.erase(ms.find(1));// single one is erased



//--------------------------------------------------------------------------------------------------------------------------------------------------------




//---------------------------------------------------------------------------------------------------------------------------------------------------



    //-----------------UNORDERED SET--------------------------------------------------------------------------------------------------------------------
    // unordered_set<int>st;



//--------------------------------------------------------------------------------------------------------------------------------------------------




//------------------------------------------------------------------------------------------------------------------------------------------------------



    //------------------------MAP----------------------------------------------------------------------------------------------------------------
    // map<int,int>mp;
    // map<int,pair<int,int>>mpp;
    // mp[1]=2;
    // mp.emplace(3,1);
    // mp.insert({2,4});
    // mpp[2]={1,2};
    // mpp.insert({1,{2,4}});

    // for(auto x:mp){
    //     cout<<x.first<<" "<<x.second<<" ";
    // }
    // for(auto x:mpp){
    //     cout<<x.first<<" "<<x.second.first<<" "<<x.second.second<<endl;;
    // }
    // cout<<mp[3];
    


//---------------------------------------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------------------------------




    //------------------MULTIMAP------------------------------------------------------------------------------------------
    
}